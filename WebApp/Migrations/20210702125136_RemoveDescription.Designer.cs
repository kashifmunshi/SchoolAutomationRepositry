// <auto-generated />
using System;
using AppEntity.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebApp.Migrations
{
    [DbContext(typeof(DbEntities))]
    [Migration("20210702125136_RemoveDescription")]
    partial class RemoveDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppEntity.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 591, DateTimeKind.Local).AddTicks(7673),
                            Description = "Produce",
                            Name = "Produce"
                        },
                        new
                        {
                            DepartmentId = 2,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 592, DateTimeKind.Local).AddTicks(5434),
                            Description = "Groceries",
                            Name = "Groceries"
                        });
                });

            modelBuilder.Entity("AppEntity.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(7683),
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(7689),
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("AppEntity.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6786),
                            DepartmentId = 1,
                            Description = "Tomatoes",
                            Name = "Tomatoes"
                        },
                        new
                        {
                            ProductId = 2,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6794),
                            DepartmentId = 2,
                            Description = "Ginger",
                            Name = "Ginger"
                        },
                        new
                        {
                            ProductId = 3,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6796),
                            DepartmentId = 2,
                            Description = "Brocolli",
                            Name = "Brocolli"
                        },
                        new
                        {
                            ProductId = 4,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6797),
                            DepartmentId = 1,
                            Description = "Lettuce",
                            Name = "Lettuce"
                        },
                        new
                        {
                            ProductId = 5,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6798),
                            DepartmentId = 2,
                            Description = "Baking Powder",
                            Name = "Baking Powder"
                        },
                        new
                        {
                            ProductId = 6,
                            CreatedBy = 1,
                            CreatedTime = new DateTime(2021, 7, 2, 18, 51, 35, 593, DateTimeKind.Local).AddTicks(6800),
                            DepartmentId = 1,
                            Description = "Chocolate",
                            Name = "Chocolate"
                        });
                });

            modelBuilder.Entity("AppEntity.Models.Order", b =>
                {
                    b.HasOne("AppEntity.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AppEntity.Models.Product", b =>
                {
                    b.HasOne("AppEntity.Models.Department", "Department")
                        .WithMany("Products")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AppEntity.Models.Department", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AppEntity.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
